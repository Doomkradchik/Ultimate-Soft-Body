#pragma kernel SimulateTruss
#pragma kernel HashTrussForces
#pragma kernel SimulateNode
#pragma kernel RunCC
#pragma kernel RunIC
#pragma kernel CCMeshCalc
#pragma kernel FSBSimulateNode
#pragma kernel NodeInter;
#pragma kernel ICMeshProject;
#pragma kernel ICMeshOverrideVel;
#pragma kernel FindMinDist;


#define MAX_FLT 10000000.0
#define MIN_DEF 0.01
#define MIN_PNTR 0.01
#define DAMAGE_K 1.0
#define AMPLITUDE 1.0;
#define PI 3.141592
#define MIN_VEL_CALM 1.0;

#include "sbLib.cginc"

cbuffer SimulationParams : register(b0)
{
     float dTime;
     float maxAmplitude;
     float stiffness;
     float stiffnessO;
     float damping;
     int nodesCount;
     int collisionType;
     float dampingT;
};

cbuffer ICParams : register(b1)
{
    float damMul;
    float minVel;
    float kind1Rad;
};

StructuredBuffer<TrussData> ROTrussesData : register(t0);
StructuredBuffer<TrussNodeInfo> RONodeTInfo: register(t1);
StructuredBuffer<NodeOtherData> RONodeOtherData: register(t2);

StructuredBuffer<CCData> ROCCData: register(t3);
StructuredBuffer<int> ROCCCounter: register(t4);

StructuredBuffer<ICData> ROICDataONE: register(t5);

StructuredBuffer<float3> ROMeshVertONE: register(t6);
StructuredBuffer<int> ROMeshTriONE: register(t7);
StructuredBuffer<TransfE> ROTransfONE: register(t8);

RWStructuredBuffer<float3> Diagnostics;

RWStructuredBuffer<float3> TotalDForce: register(u0);
RWStructuredBuffer<float3> RWNodePositions: register(u1);
RWStructuredBuffer<float3> RWNodeVelocities: register(u2);
RWStructuredBuffer<float3> RWTrussForce: register(u3);
RWStructuredBuffer<float> RWNodeStiffnessLengthTO: register(u4);
RWStructuredBuffer<float3> RWStiffnesPoints : register(u6); // init in start

RWStructuredBuffer<float> OUTICMinDist : register(u8); 
RWStructuredBuffer<RD> ICMeshData : register(u9);

[numthreads(8,8,1)]
void SimulateTruss(uint3 id : SV_DispatchThreadID)
{
    uint idx = id.x + id.y * 8 * 18;
    int2 pairID = ROTrussesData[idx].indexPair;
    float3 vec = (RWNodePositions[pairID.x] - RWNodePositions[pairID.y]);
    if(length(vec) == 0) return;
    float delta = length(vec) - ROTrussesData[idx].restLength;
    float3 springForce = delta * stiffness * normalize(vec);
    float3 dampingForce = normalize(vec) 
    * dot(RWNodeVelocities[pairID.x] - RWNodeVelocities[pairID.y], normalize(vec)) 
    * dampingT;
     
    RWTrussForce[idx] = springForce + dampingForce;
}

[numthreads(256,1,1)]
void HashTrussForces(uint3 id : SV_DispatchThreadID)
{
    TotalDForce[id.x] = 0;
    int trussesCount = RONodeOtherData[id.x].trussesConnected;
    for(int i = 0; i < trussesCount; i++)
	{
           int index = i * nodesCount + id.x;
           int trussIndex = RONodeTInfo[index].trussID;
           TotalDForce[id.x] +=  RWTrussForce[trussIndex] *   RONodeTInfo[index].right;
    }
}

float3 RELTRANSF(TransfE tre, float3x3 localCM, float3 p)
{
    float1x3 scale = float3(tre.lscale.x * 2.0, tre.lscale.y * 2.0,tre.lscale.z * 2.0);
    return (tre.lpos + mul(localCM, p) * scale);
}

float3 ReactTO(int index)
{
     float3 vectorToOrigin = RWStiffnesPoints[index] - RWNodePositions[index];
     float distance = length(vectorToOrigin);
     if(distance == 0) return 0;

    // float cv = maxAmplitude * length(RWStiffnesPoints[index] - RONodeOtherData[index].startPosition) *  RONodeOtherData[index].weight;
    float cv = maxAmplitude *  RONodeOtherData[index].weight;
     float offsetMagnitude = distance <= cv ? 0 : distance - cv;
     RWStiffnesPoints[index] -= normalize(vectorToOrigin) * offsetMagnitude; 

     float3 dampingForce = normalize(vectorToOrigin) 
        * dot(RWNodeVelocities[index], normalize(vectorToOrigin)) 
        * damping;

     //float3 toOR = RWNodePositions[index] - RONodeOtherData[index].startPosition;   
     ////RWNodePositions[index] = length(toOR) > 1.0 ? RONodeOtherData[index].startPosition + normalize(toOR) * 1.0 : RWNodePositions[index];
     return (normalize(vectorToOrigin) * stiffnessO * distance - dampingForce) * (1.1 - RONodeOtherData[index].weight);
}

CCOUT DetectBoxCollision(CCData ccD, float3x3 localCoordinateMatrix,  uint index)
{
    CCOUT collision;
    TransfE data = ccD.tre;
    float3 delta = RWNodePositions[index] - data.lpos;
    float3x3 inverseCoordinate = ComputeInverse(localCoordinateMatrix); 
    float3 localBoundPoint = mul(inverseCoordinate, delta);

    float3 absolutePoint = abs(localBoundPoint);
    collision.coll = absolutePoint.x < data.lscale.x
    && absolutePoint.y < data.lscale.y
    && absolutePoint.z < data.lscale.z;

    float3 dist = data.lscale - abs(localBoundPoint);
    float minVal = min(dist.x, min(dist.y, dist.z));
    float3 offset = float3(
        minVal == dist.x ? minVal : 0.0, 
        minVal == dist.y ? minVal : 0.0, 
        minVal == dist.z ? minVal : 0.0);

    float3 cSidePoint = localBoundPoint +  sign(localBoundPoint) * offset;
    collision.t = data.lpos + mul(localCoordinateMatrix, cSidePoint);
    return collision;
}

CCOUT PointTr(float3 np, float3 p1, float3 p2, float3 p3, CCOUT c)
{
    CCOUT r;
    float3 n = normalize(cross(p2 - p1, p3 - p1));
    float3 pp = np - (dot(n, np) - dot(n, p1)) *n;
    float mp = length(pp - np);
    if(mp >= c.ml) return c;

    float3 bc = BARYC(pp, p1, p2, p3);
    if(bc.x >= 0 && bc.y >= 0 && bc.z >= 0)
    {
        r.t = pp;
        r.ml = mp;
        return r;
    }

    float3x3 npls = float3x3 (
        PLine(pp, p1, p2) - np,
        PLine(pp, p3, p2) - np,
        PLine(pp, p1, p3) - np
    ); 

    float3 cl = min(npls[2], min(npls[0], npls[1]));
    if(length(cl) >= c.ml) return c;
    
    r.t = np + cl;
    r.ml = length(cl);
    return r;
}

RD RayTR(float3 ro, float3 rd, float3 a, float3 b, float3 c, bool fo)
{
    RD outrd;
    outrd.itrs = 0;
    outrd.dist = 0.0;
    float epsilon = 0.0000001;
    float3 ba = b - a;
    float3 ca = c - a;
    float3 h = cross(rd, ca);
    outrd.n = normalize(h);
    float det = dot(ba, h);
    if (det < epsilon && (fo || det > -epsilon)) return outrd;
    float f = 1.0 / det;
    float3 s = ro - a;
    float u = dot(s, h) * f;
    if (u < 0.0 || u > 1.0) return outrd;
    float3 q = cross(s, ba);
    float v = dot(rd, q) * f;
    if (v < 0.0 || u + v > 1.0) return outrd;
    float t = dot(ca, q) * f;
    outrd.itrs = fo || t > epsilon ? 1 : 0;
    outrd.dist = t;
    return outrd;
}


CCOUT DetectSphere(CCData data,uint index) 
{
    CCOUT rout;
    float3 lcent = data.tre.lpos;
    float3 vec = RWNodePositions[index] - lcent;
    float3 dir = length(vec) == 0 ? float3(1.0 , 0, 0) : normalize(vec);
    rout.t = lcent + dir * data.sphRad;
    rout.coll = length(vec) < data.sphRad;
    return rout;
}

ICOUT ICMeshCalc(uint idx, float3x3 localCM, ICData icd, TransfE tre)
{
    ICOUT rout;
    rout.det = false;
    rout.vel = 0;

    for(uint i = 0; i < tre.trianglesCount; i +=3)
    {
        float3x3 trCoord = float3x3(
            RELTRANSF(tre, localCM, ROMeshVertONE[ROMeshTriONE[i]]),
            RELTRANSF(tre, localCM, ROMeshVertONE[ROMeshTriONE[i + 1]]),
            RELTRANSF(tre, localCM, ROMeshVertONE[ROMeshTriONE[i + 2]])
            );

        RD interRD = RayTR(RWNodePositions[idx], -100.0 * icd.cvel, 
            trCoord[0], trCoord[1], trCoord[2], false);
       
        if(interRD.itrs)
        {       
           float3 dir = icd.cvel - 2 * dot(icd.cvel, interRD.n) * interRD.n;
           rout.vel = dir * damMul * exp(-1000.0 * interRD.dist) * DAMAGE_K;   
           rout.det = true;
           return rout;
        }
    }

    return rout;
}

ICOUT ICSphereCalc(uint idx, ICData icd)
{
    ICOUT rout;
    rout.det = false;
    rout.vel = 0;
    if(dot(RONodeOtherData[idx].normal, -1.0 * icd.cvel) < minVel) return rout;
    float ad = length(icd.cpoint - RWNodePositions[idx]);
    rout.vel = ad <= kind1Rad ? icd.cvel * (kind1Rad - ad) * damMul : 0;
    rout.det = true;
    return rout;
}

[numthreads(256,1,1)] 
void CCMeshCalc(uint3 id : SV_DispatchThreadID)
{
    CCOUT cout;
    int itrsC = 0;
    cout.ml = MAX_FLT;
    TransfE data = ROTransfONE[0];
    float3x3 lcm = GetLocalCoordMatrix(data.lrot);


    for(uint i = 0; i < data.trianglesCount ; i +=3){
        
         float3x3 trCoord = float3x3(
            RELTRANSF(data, lcm, ROMeshVertONE[ROMeshTriONE[i]]),
            RELTRANSF(data, lcm, ROMeshVertONE[ROMeshTriONE[i + 1]]),
            RELTRANSF(data, lcm, ROMeshVertONE[ROMeshTriONE[i + 2]])
            );

       cout = PointTr(RWNodePositions[id.x], trCoord[0], trCoord[1], trCoord[2], cout);
       if(RayTR(RWNodePositions[id.x], float3(1000.0, 0, 0) + 0.0000001, trCoord[0], trCoord[1], trCoord[2], false).itrs == 1)
            itrsC++;
    }

    if(itrsC % 2 == 1) 
	{
         RWNodePositions[id.x] = cout.t;
         RWNodeVelocities[id.x] = 0;
    }
}


[numthreads(256,1,1)] 
void ICMeshProject(uint3 id : SV_DispatchThreadID)
{
    ICData icd = ROICDataONE[0];
    TransfE tre = ROTransfONE[0];

    ICOUT res;
    res.det = false;
    res.vel = 0;

    float3x3 localCM = GetLocalCoordMatrix(tre.lrot);
             
    for(uint i = 0; i < tre.trianglesCount; i +=3)
    {
        float3x3 trCoord = float3x3(
            RELTRANSF(tre, localCM, ROMeshVertONE[ROMeshTriONE[i]]),
            RELTRANSF(tre, localCM, ROMeshVertONE[ROMeshTriONE[i + 1]]),
            RELTRANSF(tre, localCM, ROMeshVertONE[ROMeshTriONE[i + 2]])
            );

        RD interRD = RayTR(RWNodePositions[id.x], -100000.0 * icd.cvel, 
            trCoord[0], trCoord[1], trCoord[2], false);
       

         ICMeshData[id.x] = interRD;
         if(interRD.itrs == 1) {break;}
    }
}

[numthreads(1,1,1)] 
void FindMinDist(uint3 id : SV_DispatchThreadID){
    float md = 100000.0;
    for(uint i = 0; i < nodesCount;i ++){
        if(ICMeshData[i].itrs == 1)
            md = min(md, ICMeshData[i].dist);  
    }
    OUTICMinDist[0] = md;
}

[numthreads(256,1,1)] 
void ICMeshOverrideVel(uint3 id : SV_DispatchThreadID){
    
     ICData icd = ROICDataONE[0];
     RD interRD = ICMeshData[id.x];
     Diagnostics[id.x] = 300.0;
     if(interRD.itrs == 1) {
          float3 dir = icd.cvel - 2 * dot(icd.cvel, interRD.n) * interRD.n;
           RWNodeVelocities[id.x] += dir * damMul * exp(-1000000.0 * (interRD.dist - OUTICMinDist[0])) * DAMAGE_K; 
       } // +=
      
}


[numthreads(256,1,1)] 
void RunIC(uint3 id : SV_DispatchThreadID)
{
    ICData icd = ROICDataONE[0];
    TransfE tre = ROTransfONE[0];

    ICOUT res;
    res.det = false;
    res.vel = 0;

    switch(collisionType)
    {
            case 0:
                 res = ICSphereCalc(id.x, icd);
                 break;
            case 1:
                 res = ICMeshCalc(id.x, GetLocalCoordMatrix(tre.lrot), icd, tre);     
                 break;
    }
    if(res.det){
        RWNodeVelocities[id.x] += res.vel;
    }
}

void UPD(CCOUT dc, uint idx)
{
    if(dc.coll && length(dc.t - RWNodePositions[idx]) > MIN_PNTR)
        {
             RWNodePositions[idx] = dc.t;
             RWNodeVelocities[idx] = 0;
        }
}

[numthreads(256,1,1)] 
void RunCC(uint3 id : SV_DispatchThreadID)
{
    for(uint i = 0; i < ROCCCounter[0]; i++)
    {
        CCData data = ROCCData[i];
        float3x3 lcm = GetLocalCoordMatrix(data.tre.lrot);
        CCOUT dc;

        switch(data.tre.colliderType)
        {
            case 0:
                 break;
            case 1:
                 dc = DetectSphere(data, id.x);
                 UPD(dc, id.x);
                 break;
            case 2:
                 dc =  DetectBoxCollision(data,lcm, id.x);
                 UPD(dc, id.x);
                 break;
        }
    }
}

[numthreads(256,1,1)] 
void SimulateNode(uint3 id : SV_DispatchThreadID)
{
    float3 deltaForce = TotalDForce[id.x] + ReactTO(id.x);
    RWNodeVelocities[id.x] += deltaForce * dTime / RONodeOtherData[id.x].mass;
    RWNodePositions[id.x] += RWNodeVelocities[id.x] * dTime;
}

[numthreads(256,1,1)]
void FSBSimulateNode(uint3 id : SV_DispatchThreadID)
{
    RWNodeVelocities[id.x]*= 0.7;//FuncM(length(RWNodeVelocities[id.x]), 0.07, 0.03);// simple reducer
    RWNodePositions[id.x] += RWNodeVelocities[id.x] * dTime;
}


RWStructuredBuffer<float3> RWOriginVertices;
StructuredBuffer<NodeOtherData> ROOriginOther;

[numthreads(256,1,1)]
void NodeInter(uint3 id : SV_DispatchThreadID)
{
    float3 sumVec = 0;
    float magSum = 0;
  
    for(uint i = 0; i < nodesCount; i++)
    {
        float stDist = distance(ROOriginOther[id.x].startPosition, RONodeOtherData[i].startPosition);
        if(stDist < 2.0) // dot(ROOriginOther[id.x].normal, RONodeOtherData[i].normal) > 0
        {
                    
                    float3 vec = RWNodePositions[i] - ROOriginOther[id.x].startPosition;
                    float nDist = distance(ROOriginOther[id.x].startPosition, RWNodePositions[i]);
                    float d = nDist - stDist;
                    float w = 1.0 / (exp(stDist));
                    sumVec += w * vec * d;
                    magSum += length(vec) * w;
        }
    }
    if(magSum > 0)
        RWOriginVertices[id.x] = ROOriginOther[id.x].startPosition + sumVec / magSum; /// c; 
}